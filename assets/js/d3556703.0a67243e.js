"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[396],{3969:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var i=s(8101);const o={},l=i.createContext(o);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},8367:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"json/controls","title":"User Controls","description":"This section covers the controls that are displayed on the HUD page, grouped with other controls of similar purpose. This will include properties only available to specific types of controls.","source":"@site/docs/json/controls.md","sourceDirName":"json","slug":"/json/controls","permalink":"/TF2HUD.Editor/json/controls","draft":false,"unlisted":false,"editUrl":"https://github.com/CriticalFlaw/TF2HUD.Editor/tree/master/docs/json/controls.md","tags":[],"version":"current","lastUpdatedAt":1759498484000,"frontMatter":{"title":"User Controls"},"sidebar":"jsonSideBar","previous":{"title":"Main Settings","permalink":"/TF2HUD.Editor/json/base"},"next":{"title":"List Options","permalink":"/TF2HUD.Editor/json/options"}}');var o=s(5105),l=s(3969);const t={title:"User Controls"},r=void 0,a={},h=[{value:"Name",id:"name",level:3},{value:"Label",id:"label",level:3},{value:"Type",id:"type",level:3},{value:"Value",id:"value",level:3},{value:"Tooltip",id:"tooltip",level:3},{value:"Restart",id:"restart",level:3},{value:"Preview",id:"preview",level:3},{value:"Special",id:"special",level:3},{value:"SpecialParameters",id:"specialparameters",level:3},{value:"Files",id:"files",level:3},{value:"FileName",id:"filename",level:3},{value:"RenameFile",id:"renamefile",level:3},{value:"ComboFiles",id:"combofiles",level:3},{value:"Options",id:"options",level:3},{value:"Pulse",id:"pulse",level:3},{value:"Shadow",id:"shadow",level:3},{value:"Minimum",id:"minimum",level:3},{value:"Maximum",id:"maximum",level:3},{value:"Increment",id:"increment",level:3},{value:"Width",id:"width",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This section covers the controls that are displayed on the HUD page, grouped with other controls of similar purpose. This will include properties only available to specific types of controls."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Crosshair":\n[\n  {\n    "Name": "fh_toggle_xhair_enable",\n    "Label": "Toggle the Crosshair",\n    "Type": "Checkbox",\n    "ToolTip": "Toggle crosshair visibility.",\n    "Value": "false",\n    "Files": {\n      ...\n    }\n  },\n  {\n    "Name": "fh_toggle_xhair_pulse",\n    "Label": "Toggle the Hitmarker",\n    "Type": "Checkbox",\n    "ToolTip": "Toggle crosshair hitmarker.",\n    "Value": "true",\n    "Files": {\n      ...\n    }\n  },\n  {\n    "Name": "fh_val_xhair_style",\n    "Label": "Style",\n    "ToolTip": "Style of crosshair.",\n    "Type": "Crosshair",\n    "Value": "<",\n    "Options": {\n      ...\n    }\n  },\n  {\n    "Name": "fh_val_xhair_size",\n    "Label": "Size",\n    "Type": "IntegerUpDown",\n    "Value": "18",\n    "Minimum": "10",\n    "Maximum": "30",\n    "Increment": "1",\n    "ToolTip": "Size of the crosshair.",\n    "Files": {\n      ...\n    }\n  },\n  {\n    "Name": "fh_color_xhair_normal",\n    "Label": "Crosshair",\n    "Type": "ColorPicker",\n    "ToolTip": "Default crosshair color.",\n    "Value": "242 242 242 255",\n    "Files": {\n      ...\n    }\n  },\n  {\n    "Name": "fh_color_xhair_pulse",\n    "Label": "Hitmarker",\n    "Type": "ColorPicker",\n    "ToolTip": "Color of crosshair when hitting another player.",\n    "Value": "255 0 0 255",\n    "Files": {\n      ...\n    }\n  }\n]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"name",children:"Name"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Required"}),". Name of the control. This name must be unique, have no spaces and suggest the control's purpose."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"To avoid conflicts, prefix each name with an abbreviation for the HUD. Example; budhud is bh, flawhud is fh."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Name": "fh_color_health_buff"\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"label",children:"Label"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Required"}),". Text displayed near the control. This space is limited, so save longer explanations for the ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/controls/#tooltip",children:"Tooltip"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Label": "Buffed Health"\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"type",children:"Type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Required"}),". Defines the type of control this will appear as on the page. Below are the supported types:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CheckBox"})," - Toggling this will either enable or disablee the customization option attached to this control."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ColorPicker"})," - Opens a color picker for the user to select an RGBA color. Can also use ",(0,o.jsx)(n.strong,{children:"Color"}),", ",(0,o.jsx)(n.strong,{children:"Colour"})," or ",(0,o.jsx)(n.strong,{children:"ColourPicker"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ComboBox"})," - Contains a list of ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/controls/#options",children:"options"}),", each with their own customization instructions. Can also use ",(0,o.jsx)(n.strong,{children:"DropDown"}),", ",(0,o.jsx)(n.strong,{children:"DropDownMenu"})," or ",(0,o.jsx)(n.strong,{children:"Select"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Number"})," - An integer counter ranging between set minimum and maximum values. Commonly to be used for crosshair sizes and number of rows on the killfeed. Can also use ",(0,o.jsx)(n.strong,{children:"Integer"})," or ",(0,o.jsx)(n.strong,{children:"IntegerUpDown"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Crosshair"})," - Contains a list of styles from ",(0,o.jsx)(n.a,{href:"https://github.com/Hypnootize/TF2-Hud-Crosshairs",children:"Hypnotize's Crosshair Pack"})," that are applied to the HUD's ",(0,o.jsx)(n.code,{children:"hudlayout.res"})," file. Can also use ",(0,o.jsx)(n.strong,{children:"CustomCrosshair"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Background"})," - Provides the user with the option to select an image file to convert into VTF as a replacement for the HUD's background. Can also use ",(0,o.jsx)(n.strong,{children:"CustomBackground"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TextBox"})," - Text field contents of which will be used as the value for a property in a given hUD file. Can also use ",(0,o.jsx)(n.strong,{children:"Text"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"value",children:"Value"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Required"}),". Default value for the control, compatible with the selected control ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/controls/#type",children:"type"}),". Allowed values per type are listed below:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CheckBox"})," - true, false."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ColorPicker"})," - RGBA color code, ",(0,o.jsx)(n.strong,{children:"30 30 30 200"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ComboBox"})," - Integer value of the option selected."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"IntegerUpDown"})," - Integer value within the set range."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Crosshair"})," - Integer value of the option selected."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Background"})," - Not required."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TextBox"})," - Not required."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"tooltip",children:"Tooltip"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Text that shown when the user hovers their mouse over control."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Tooltip": "Color of player\'s health, when buffed."\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"restart",children:"Restart"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". If true, the editor will tell the user that the game must be restarted for this customization to apply."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Restart": false\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"preview",children:"Preview"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Sets the image that previews the effect of this customization option. If a valid image is supplied, a question mark button will appear near the control that will open a modal with the linked image when pressed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Preview": "https://user-images.githubusercontent.com/6818236/114957712-9bd4d400-9e2f-11eb-8612-479313086c47.jpg",\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"special",children:"Special"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Special case property for customizations that otherwise cannot be through the schema. For more information, see ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/special/",children:"this section"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Special": "StockBackgrounds"\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"specialparameters",children:"SpecialParameters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". This parameter is required when using the special command ",(0,o.jsx)(n.code,{children:"HUDBackground"}),", see ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/backgrounds/",children:"Custom Backgrounds"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"SpecialParameters": []\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"files",children:"Files"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Defines a list of files that will need to be updated if the given option is selected, where each file path is relative to the root of the HUD."]}),"\n",(0,o.jsxs)(n.p,{children:["For in depth documentation on File editing, see ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/files/",children:"this section"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsx)(n.p,{children:"Each nested object within the file path has to match the contents of the HUD file, otherwise the editor will not be able to apply the changes."})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"filename",children:"FileName"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Name of the file or folder that will be moved from ",(0,o.jsx)(n.code,{children:"CustomizationsFolder"})," to ",(0,o.jsx)(n.code,{children:"EnabledFolder"})," if this option is selected."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"FileName": "hudplayerhealth-broesel.res"\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"renamefile",children:"RenameFile"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Name of a file or folder that will be renamed or moved based on the value of the associated control. This property can be useful for performing a large number of customizations that are already implemented using folder based customization. Folder renames or moves should end with a ",(0,o.jsx)(n.code,{children:"/"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Only applies to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CheckBox"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ComboBox"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"CheckBox:"})}),"\n",(0,o.jsxs)(n.p,{children:["If the CheckBox is checked, the ",(0,o.jsx)(n.code,{children:"example-customization"})," folder will be moved into the ",(0,o.jsx)(n.code,{children:"enabled"})," folder, else it will be moved out."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Label": "Enable complicated customization",\n"Type": "CheckBox",\n"RenameFile": {\n\t"OldName": "customizations/example-customization/",\n\t"NewName": "customizations/enabled/example-customization/"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"ComboBox:"})}),"\n",(0,o.jsx)(n.p,{children:"Only the selected ComboBox value RenameFile.NewName will be enabled, other options will be renamed or moved back to the RenameFile.OldName."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Label": "Resolution",\n"Type": "ComboBox",\n"Options": [\n\t{\n\t\t"Label": "4x3",\n\t\t"Value": "0",\n\t\t"RenameFile": {\n\t\t\t"OldName": "customizations/4x3-customization/",\n\t\t\t"NewName": "customizations/enabled/4x3-customization/"\n\t\t}\n\t},\n\t{\n\t\t"Label": "16x9",\n\t\t"Value": "1",\n\t\t"RenameFile": {\n\t\t\t"OldName": "customizations/16x9-customization/",\n\t\t\t"NewName": "customizations/enabled/16x9-customization/"\n\t\t}\n\t}\n]\n\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"combofiles",children:"ComboFiles"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, ComboBox Only"}),". Lists all the files that will be handled by this control, this is used for returning everything back to normal if the user does not make a selection."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"ComboFiles": [\n\t"hudplayerhealth-broesel.res",\n\t"hudplayerhealth-cross.res"\n],\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, ComboBox Only"}),". Lists all the options on the list. For information on how each option is defined, ",(0,o.jsx)(n.a,{href:"http://criticalflaw.ca/TF2HUD.Editor/json/options/",children:"see here"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'...\n"Type": "ComboBox",\n"Value": "0",\n"Options": [\n\t{\n\t\t"Label": "Flash",\n\t\t"Value": "0",\n\t\t...\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"pulse",children:"Pulse"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, ColorPicker Only"}),". If true, the color will have a new entry in the client scheme with a reduced alpha."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Pulse": true\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"shadow",children:"Shadow"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, ColorPicker Only"}),". If true, the color will have a new entry in the client scheme where each color channel is darkened by 40%."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Shadow": true\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"minimum",children:"Minimum"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, IntegerUpDown Only"}),". Sets the minimum value that the integer counter can go down to."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Minimum": 10\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"maximum",children:"Maximum"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, IntegerUpDown Only"}),". Sets the maximum value that the integer counter can go down to."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Maximum": 30\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"increment",children:"Increment"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional, IntegerUpDown Only"}),". Sets the number by which the integer counter value will change."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Increment": 2\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"width",children:"Width"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Optional"}),". Override the width of the control with a different value. Default width of any given control is varied."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"Width": 200\n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);